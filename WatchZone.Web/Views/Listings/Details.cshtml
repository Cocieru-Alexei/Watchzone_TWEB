@model WatchZone.Domain.Model.Listing

@{
    ViewBag.Title = Model.Title;
    var isLoggedIn = Request.Cookies["X-KEY"] != null;
    var currentUserId = ViewBag.CurrentUserId as int? ?? -1;
    var canEdit = currentUserId == Model.UserId;
    var primaryPhoto = Model.Photos?.FirstOrDefault(p => p.IsPrimary);
    var hasPhotos = Model.Photos != null && Model.Photos.Any();
}

<div class="container">
    <div class="row">
        <!-- Photo Gallery Section -->
        <div class="col-md-6">
            @if (hasPhotos)
            {
                <!-- Main Photo Display -->
                <div class="mb-3">
                    <img id="mainPhoto" src="@(primaryPhoto?.FilePath ?? Model.Photos.First().FilePath)" 
                         class="img-fluid rounded shadow" alt="@Model.Title" style="width: 100%; height: 400px; object-fit: cover;">
                </div>
            }
            
            @if (hasPhotos && Model.Photos.Count > 1)
            {
                <!-- Photo Thumbnails -->
                <div class="row">
                    @foreach (var photo in Model.Photos.OrderBy(p => p.DisplayOrder))
                    {
                        <div class="col-3 mb-2">
                            <img src="@photo.FilePath" class="img-thumbnail photo-thumbnail" 
                                 alt="@Model.Title" style="height: 80px; width: 100%; object-fit: cover; cursor: pointer;"
                                 onclick="changeMainPhoto('@photo.FilePath')"
                                 data-photo-id="@photo.PhotoId">
                            @if (photo.IsPrimary)
                            {
                                <small class="text-primary d-block text-center">Primary</small>
                            }
                            @if (canEdit)
                            {
                                <div class="text-center mt-1">
                                    @if (!photo.IsPrimary)
                                    {
                                        <button class="btn btn-sm btn-outline-primary" onclick="setPrimaryPhoto(@Model.Listings_Id, @photo.PhotoId)">
                                            Set Primary
                                        </button>
                                    }
                                    <button class="btn btn-sm btn-outline-danger" onclick="deletePhoto(@photo.PhotoId)">
                                        Delete
                                    </button>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
            
            @if (!hasPhotos && !string.IsNullOrEmpty(Model.ImageUrl))
            {
                <!-- Fallback to ImageUrl if no photos -->
                <img src="@Model.ImageUrl" class="img-fluid rounded shadow" alt="@Model.Title" style="width: 100%; height: 400px; object-fit: cover;">
            }
            
            @if (!hasPhotos && string.IsNullOrEmpty(Model.ImageUrl))
            {
                <!-- No photos placeholder -->
                <div class="bg-light rounded d-flex align-items-center justify-content-center" style="height: 400px;">
                    <div class="text-center text-muted">
                        <i class="fas fa-image fa-3x mb-3"></i>
                        <p>No photos available</p>
                    </div>
                </div>
            }


        </div>

        <!-- Listing Details Section -->
        <div class="col-md-6">
            <h2>@Model.Title</h2>
            <p class="lead text-success">$@Model.Price</p>
            <p><strong>Listed on:</strong> @Model.CreatedAt.ToString("MMMM dd, yyyy")</p>
            
            @if (canEdit)
            {
                <div class="mb-3">
                    @Html.ActionLink("Edit Listing", "Edit", new { id = Model.Listings_Id }, new { @class = "btn btn-outline-primary btn-sm" })
                    @Html.ActionLink("Delete Listing", "Delete", new { id = Model.Listings_Id }, new { @class = "btn btn-outline-danger btn-sm" })
                </div>
            }
            
            <hr />
            <h5>Description</h5>
            <p>@Model.Description</p>

            <!-- Add to Cart Section -->
            <div class="mt-4">
                @if (isLoggedIn && !canEdit)
                {
                    using (Html.BeginForm("AddToCart", "Cart", FormMethod.Post))
                    {
                        <input type="hidden" name="WatchId" value="@Model.Listings_Id" />
                        <input type="hidden" name="WatchName" value="@Model.Title" />
                        <input type="hidden" name="Price" value="@Model.Price" />
                        <input type="hidden" name="ImageUrl" value="@(primaryPhoto?.FilePath ?? Model.ImageUrl)" />
                        <input type="hidden" name="Quantity" id="cartQuantity" value="1" />

                        <div class="mb-3">
                            <label for="quantity" class="form-label">Quantity:</label>
                            <div class="input-group" style="width: 150px;">
                                <button class="btn btn-outline-secondary" type="button" id="decreaseQty">-</button>
                                <input type="number" class="form-control text-center" id="quantity" value="1" min="1" max="10">
                                <button class="btn btn-outline-secondary" type="button" id="increaseQty">+</button>
                            </div>
                        </div>

                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="fas fa-cart-plus"></i> Add to Cart
                        </button>
                    }
                }
                else if (!isLoggedIn)
                {
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i> Please <a href="@Url.Action("Login", "Auth")" class="alert-link">login</a> to add items to your cart.
                    </div>
                }
                else if (canEdit)
                {
                    <div class="alert alert-warning">
                        <i class="fas fa-info-circle"></i> This is your own listing. You cannot add it to your cart.
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="mt-4">
        @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-secondary" })
    </div>
</div>

@section scripts {
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Quantity controls
        const decreaseBtn = document.getElementById('decreaseQty');
        const increaseBtn = document.getElementById('increaseQty');
        const quantityInput = document.getElementById('quantity');
        const cartQuantity = document.getElementById('cartQuantity');

        if (decreaseBtn && increaseBtn && quantityInput && cartQuantity) {
            function updateCartQuantity() {
                cartQuantity.value = quantityInput.value;
            }

            decreaseBtn.addEventListener('click', function() {
                let value = parseInt(quantityInput.value);
                if (value > 1) {
                    quantityInput.value = value - 1;
                    updateCartQuantity();
                }
            });

            increaseBtn.addEventListener('click', function() {
                let value = parseInt(quantityInput.value);
                if (value < 10) {
                    quantityInput.value = value + 1;
                    updateCartQuantity();
                }
            });

            quantityInput.addEventListener('change', function() {
                let value = parseInt(this.value);
                if (value < 1) this.value = 1;
                if (value > 10) this.value = 10;
                updateCartQuantity();
            });
        }
    });

    // Photo gallery functions
    function changeMainPhoto(photoPath) {
        document.getElementById('mainPhoto').src = photoPath;
    }



    // Delete photo function
    function deletePhoto(photoId) {
        if (confirm('Are you sure you want to delete this photo?')) {
            fetch('/Photo/DeletePhoto', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'photoId=' + photoId
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload(); // Refresh to remove deleted photo
                } else {
                    alert('Error deleting photo: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error deleting photo:', error);
                alert('Error deleting photo');
            });
        }
    }

    // Set primary photo function
    function setPrimaryPhoto(listingId, photoId) {
        fetch('/Photo/SetPrimaryPhoto', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: 'listingId=' + listingId + '&photoId=' + photoId
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload(); // Refresh to update primary photo
            } else {
                alert('Error setting primary photo: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error setting primary photo:', error);
            alert('Error setting primary photo');
        });
    }
    </script>
} 